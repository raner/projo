//                                                                          //
// Copyright 2022 Mirko Raner                                               //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
//                                                                          //
package pro.projo.annotations;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

/**
* The {@link Inherits @Inherits} annotation is used for marking methods of an
* {@link Implements @Implements} interface that would be inherited from the implemented interface
* but are not in compile-time scope since that interface is not actually extended.
* For each method that would be inherited from the original interface (and that is actually called
* from at least one implementation method), a stand-in method with an {@link Inherits @Inherits}
* annotation must be provided. At runtime, this will result in a call to the original inherited
* method.
*
* One problem is that the signature of the real inherited method to be called (though referring to
* the implementing type as its defining type) will use interface types (rather than implementation
* types) for the parameter types and return type of its signature. For example, such a method would
* be invoked with a signature like {@code fxx/natives/Real.minus:(Lfxx/lang/Invertible;)Lfxx/lang/Invertible;}
* (with {@code fxx/lang} signifying interface types, and {@code fxx/natives} signifying implementation
* types). When compiling the interface bearing the {@link Implements @Implements} annotation, this
* signature could not be created, since the parameter types and return type would not be available at
* compile time. Therefore, rather than being simply "stand-in" methods that solely exist so that other
* methods can call an inherited implementation, methods with an {@link Inherits @Inherits} annotation
* will be implemented by Projo as a kind of "bridge method" that will call the actual inherited
* implementation (similar to the bridge methods generated by the Java compiler, but without the
* {@code ACC_BRIDGE} flag).
*
* The method annotated with {@link Inherits @Inherits} needs to be an abstract method, and it also must
* be annotated with {@link Returns @Returns} and {@link Expects @Expects} annotations, as these annotations
* will indicate to which inherited method the generated bridge method will delegate.
*
* @author Mirko Raner
**/
@Target(METHOD)
@Retention(RUNTIME)
public @interface Inherits
{
}
